{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jerej\\\\Desktop\\\\R0314-MEAN\\\\project-3-frontend\\\\src\\\\components\\\\edit.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { Button, FormInput, Form, FormGroup } from \"shards-react\";\nimport Alert from \"./alert\";\nimport LoadingSpinner from \"./loadingSpinner\";\n\nclass Edit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      initialData: \"\",\n      formControl: {\n        Name: {\n          value: \"\",\n          valid: false,\n          invalid: false\n        },\n        Platform: {\n          value: \"\",\n          valid: false,\n          invalid: false\n        },\n        Year: {\n          value: \"\",\n          valid: false,\n          invalid: false\n        },\n        Global_Sales: {\n          value: \"\",\n          valid: false,\n          invalid: false\n        }\n      },\n      fetchInProgress: false,\n      alertMessage: \"\",\n      status: \"\"\n    };\n    this.changeHandler = this.changeHandler.bind(this);\n    this.isEntered = this.isEntered.bind(this);\n    this.isNumber = this.isNumber.bind(this);\n  } //Initial data is set for the text fields on component mount.\n\n\n  componentDidMount() {\n    this.getData(this.state.id).then(r => {\n      this.setState({\n        initialData: r\n      });\n    });\n  }\n\n  changeHandler(event) {\n    var fieldName = event.target.id;\n    var newValue = event.target.value;\n    var newValidState;\n    var newInvalidState;\n\n    if (fieldName === \"Year\" || fieldName === \"Global_Sales\") {\n      newValidState = this.isNumber(newValue);\n\n      if (newValidState === true) {\n        newInvalidState = false;\n      } else {\n        newInvalidState = true;\n      }\n    } else {\n      newValidState = this.isEntered(newValue);\n\n      if (newValidState === true) {\n        newInvalidState = false;\n      } else {\n        newInvalidState = true;\n      }\n    }\n\n    this.setState({\n      formControl: { ...this.state.formControl,\n        [fieldName]: {\n          value: newValue,\n          valid: newValidState,\n          invalid: newInvalidState\n        }\n      }\n    });\n  } //Validator that checks if there is a value given to the input field.\n\n\n  isEntered(value) {\n    if (value.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  } //Validator for the year and global sales fields that checks if the given value is a number.\n\n\n  isNumber(value) {\n    var numberValue = Number(value);\n    var nan = isNaN(numberValue);\n\n    if (nan === false && value !== \"\") {\n      return true;\n    } else {\n      return false;\n    }\n  } //Gets the initial field values based on the id in the URL parameter.\n\n\n  async getData(entryId) {\n    //The state is set in order to render the loading spinner.\n    this.setState({\n      fetchInProgress: true\n    });\n    var url = \"https://node-mongo-games.herokuapp.com/api/get/\" + entryId;\n    var data = await fetch(url).catch(() => {\n      this.setState({\n        alertMessage: \"Fetch error\",\n        status: \"error\"\n      });\n      ReactDOM.render( /*#__PURE__*/React.createElement(Alert, {\n        alertText: this.state.alertMessage,\n        status: \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      }), document.getElementsByClassName(\"alert\")[0]);\n    }).then(response => {\n      return response.json();\n    }).then(r => {\n      this.setState({\n        fetchInProgress: false\n      });\n      return r;\n    });\n    console.log(\"getData returns\\n\" + data);\n    return data;\n  }\n\n  updateData() {\n    var name = this.state.formControl.Name.value;\n    var platform = this.state.formControl.Platform.value;\n    var year = this.state.formControl.Year.value;\n    var globalSales = this.state.formControl.Global_Sales.value;\n\n    if (name === \"\" || platform === \"\" || year === \"\" || globalSales === \"\") {\n      this.setState({\n        alertMessage: \"Please fill all fields.\",\n        status: \"error\"\n      });\n    } else if (!this.isNumber(year) || !this.isNumber(globalSales)) {\n      this.setState({\n        alertMessage: \"Year and Global Sales fields need to have a numerical value.\",\n        status: \"error\"\n      });\n    } else {\n      var updatedData = {\n        _id: this.state.id,\n        Name: name,\n        Platform: platform,\n        Year: year,\n        Global_Sales: globalSales\n      }; //The state is set in order to render the loading spinner.\n\n      this.setState({\n        fetchInProgress: true\n      });\n      fetch(\"https://node-mongo-games.herokuapp.com/api/update\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedData)\n      }).catch(() => {\n        this.setState({\n          alertMessage: \"Fetch error\",\n          status: \"error\"\n        });\n      }).then(response => response.json()).then(() => {\n        this.setState({\n          fetchInProgress: false,\n          alertMessage: \"Edit successful!\",\n          status: \"success\"\n        });\n      });\n    }\n  }\n\n  render() {\n    var spinner = \"\";\n\n    if (this.state.fetchInProgress === true) {\n      spinner = /*#__PURE__*/React.createElement(LoadingSpinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 23\n        }\n      });\n    }\n\n    var alert = \"\";\n\n    if (this.state.alertMessage.length > 0) {\n      alert = /*#__PURE__*/React.createElement(Alert, {\n        alertText: this.state.alertMessage,\n        status: this.state.status,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(FormInput, {\n      id: \"Name\",\n      type: \"text\",\n      defaultValue: this.state.initialData.Name,\n      onChange: e => {\n        this.changeHandler(e);\n      },\n      valid: this.state.formControl.Name.valid,\n      invalid: this.state.formControl.Name.invalid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Platform\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }\n    }, \"Platform\"), /*#__PURE__*/React.createElement(FormInput, {\n      id: \"Platform\",\n      type: \"text\",\n      defaultValue: this.state.initialData.Platform,\n      onChange: e => {\n        this.changeHandler(e);\n      },\n      valid: this.state.formControl.Platform.valid,\n      invalid: this.state.formControl.Platform.invalid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Year\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 25\n      }\n    }, \"Year\"), /*#__PURE__*/React.createElement(FormInput, {\n      id: \"Year\",\n      type: \"text\",\n      defaultValue: this.state.initialData.Year,\n      onChange: e => {\n        this.changeHandler(e);\n      },\n      valid: this.state.formControl.Year.valid,\n      invalid: this.state.formControl.Year.invalid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Global_Sales\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 25\n      }\n    }, \"Global Sales\"), /*#__PURE__*/React.createElement(FormInput, {\n      id: \"Global_Sales\",\n      type: \"text\",\n      defaultValue: this.state.initialData.Global_Sales,\n      onChange: e => {\n        this.changeHandler(e);\n      },\n      valid: this.state.formControl.Global_Sales.valid,\n      invalid: this.state.formControl.Global_Sales.invalid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Button, {\n      className: \"submit-button\",\n      onClick: () => {\n        this.updateData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    }, spinner), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }\n    }, alert), /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      theme: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }\n    }, \"Back to Search\")));\n  }\n\n}\n\nexport default Edit;","map":{"version":3,"sources":["C:/Users/jerej/Desktop/R0314-MEAN/project-3-frontend/src/components/edit.js"],"names":["React","ReactDOM","Link","Button","FormInput","Form","FormGroup","Alert","LoadingSpinner","Edit","Component","constructor","props","state","id","match","params","initialData","formControl","Name","value","valid","invalid","Platform","Year","Global_Sales","fetchInProgress","alertMessage","status","changeHandler","bind","isEntered","isNumber","componentDidMount","getData","then","r","setState","event","fieldName","target","newValue","newValidState","newInvalidState","length","numberValue","Number","nan","isNaN","entryId","url","data","fetch","catch","render","document","getElementsByClassName","response","json","console","log","updateData","name","platform","year","globalSales","updatedData","_id","method","headers","body","JSON","stringify","spinner","alert","e"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../App.css\";\r\nimport { Button, FormInput, Form, FormGroup } from \"shards-react\";\r\nimport Alert from \"./alert\";\r\nimport LoadingSpinner from \"./loadingSpinner\";\r\n\r\nclass Edit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            initialData: \"\",\r\n            formControl: {\r\n                Name: {\r\n                    value: \"\",\r\n                    valid: false,\r\n                    invalid: false,\r\n                },\r\n                Platform: {\r\n                    value: \"\",\r\n                    valid: false,\r\n                    invalid: false,\r\n                },\r\n                Year: {\r\n                    value: \"\",\r\n                    valid: false,\r\n                    invalid: false,\r\n                },\r\n                Global_Sales: {\r\n                    value: \"\",\r\n                    valid: false,\r\n                    invalid: false,\r\n                },\r\n            },\r\n            fetchInProgress: false,\r\n            alertMessage: \"\",\r\n            status: \"\",\r\n        };\r\n\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.isEntered = this.isEntered.bind(this);\r\n        this.isNumber = this.isNumber.bind(this);\r\n    }\r\n\r\n    //Initial data is set for the text fields on component mount.\r\n    componentDidMount() {\r\n        this.getData(this.state.id).then((r) => {\r\n            this.setState({ initialData: r });\r\n        });\r\n    }\r\n\r\n    changeHandler(event) {\r\n        var fieldName = event.target.id;\r\n        var newValue = event.target.value;\r\n        var newValidState;\r\n        var newInvalidState;\r\n\r\n        if (fieldName === \"Year\" || fieldName === \"Global_Sales\") {\r\n            newValidState = this.isNumber(newValue);\r\n            if (newValidState === true) {\r\n                newInvalidState = false;\r\n            } else {\r\n                newInvalidState = true;\r\n            }\r\n        } else {\r\n            newValidState = this.isEntered(newValue);\r\n            if (newValidState === true) {\r\n                newInvalidState = false;\r\n            } else {\r\n                newInvalidState = true;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            formControl: {\r\n                ...this.state.formControl,\r\n                [fieldName]: {\r\n                    value: newValue,\r\n                    valid: newValidState,\r\n                    invalid: newInvalidState,\r\n                },\r\n            },\r\n        });\r\n    }\r\n\r\n    //Validator that checks if there is a value given to the input field.\r\n    isEntered(value) {\r\n        if (value.length > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //Validator for the year and global sales fields that checks if the given value is a number.\r\n    isNumber(value) {\r\n        var numberValue = Number(value);\r\n        var nan = isNaN(numberValue);\r\n        if (nan === false && value !== \"\") {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //Gets the initial field values based on the id in the URL parameter.\r\n    async getData(entryId) {\r\n        //The state is set in order to render the loading spinner.\r\n        this.setState({ fetchInProgress: true });\r\n\r\n        var url = \"https://node-mongo-games.herokuapp.com/api/get/\" + entryId;\r\n        var data = await fetch(url)\r\n            .catch(() => {\r\n                this.setState({ alertMessage: \"Fetch error\", status: \"error\" });\r\n                ReactDOM.render(\r\n                    <Alert alertText={this.state.alertMessage} status=\"error\"></Alert>,\r\n                    document.getElementsByClassName(\"alert\")[0]\r\n                );\r\n            })\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((r) => {\r\n                this.setState({ fetchInProgress: false });\r\n                return r;\r\n            });\r\n        console.log(\"getData returns\\n\" + data);\r\n        return data;\r\n    }\r\n\r\n    updateData() {\r\n        var name = this.state.formControl.Name.value;\r\n        var platform = this.state.formControl.Platform.value;\r\n        var year = this.state.formControl.Year.value;\r\n        var globalSales = this.state.formControl.Global_Sales.value;\r\n\r\n        if (name === \"\" || platform === \"\" || year === \"\" || globalSales === \"\") {\r\n            this.setState({ alertMessage: \"Please fill all fields.\", status: \"error\" });\r\n        } else if (!this.isNumber(year) || !this.isNumber(globalSales)) {\r\n            this.setState({\r\n                alertMessage: \"Year and Global Sales fields need to have a numerical value.\",\r\n                status: \"error\",\r\n            });\r\n        } else {\r\n            var updatedData = {\r\n                _id: this.state.id,\r\n                Name: name,\r\n                Platform: platform,\r\n                Year: year,\r\n                Global_Sales: globalSales,\r\n            };\r\n\r\n            //The state is set in order to render the loading spinner.\r\n            this.setState({ fetchInProgress: true });\r\n\r\n            fetch(\"https://node-mongo-games.herokuapp.com/api/update\", {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(updatedData),\r\n            })\r\n                .catch(() => {\r\n                    this.setState({ alertMessage: \"Fetch error\", status: \"error\" });\r\n                })\r\n                .then((response) => response.json())\r\n                .then(() => {\r\n                    this.setState({ fetchInProgress: false, alertMessage: \"Edit successful!\", status: \"success\" });\r\n                });\r\n        }\r\n    }\r\n    render() {\r\n        var spinner = \"\";\r\n        if (this.state.fetchInProgress === true) {\r\n            spinner = <LoadingSpinner></LoadingSpinner>;\r\n        }\r\n\r\n        var alert = \"\";\r\n        if (this.state.alertMessage.length > 0) {\r\n            alert = <Alert alertText={this.state.alertMessage} status={this.state.status}></Alert>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"edit\">\r\n                <Form>\r\n                    <FormGroup>\r\n                        <label htmlFor=\"Name\">Name</label>\r\n                        <FormInput\r\n                            id=\"Name\"\r\n                            type=\"text\"\r\n                            defaultValue={this.state.initialData.Name}\r\n                            onChange={(e) => {\r\n                                this.changeHandler(e);\r\n                            }}\r\n                            valid={this.state.formControl.Name.valid}\r\n                            invalid={this.state.formControl.Name.invalid}\r\n                        ></FormInput>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <label htmlFor=\"Platform\">Platform</label>\r\n                        <FormInput\r\n                            id=\"Platform\"\r\n                            type=\"text\"\r\n                            defaultValue={this.state.initialData.Platform}\r\n                            onChange={(e) => {\r\n                                this.changeHandler(e);\r\n                            }}\r\n                            valid={this.state.formControl.Platform.valid}\r\n                            invalid={this.state.formControl.Platform.invalid}\r\n                        ></FormInput>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <label htmlFor=\"Year\">Year</label>\r\n                        <FormInput\r\n                            id=\"Year\"\r\n                            type=\"text\"\r\n                            defaultValue={this.state.initialData.Year}\r\n                            onChange={(e) => {\r\n                                this.changeHandler(e);\r\n                            }}\r\n                            valid={this.state.formControl.Year.valid}\r\n                            invalid={this.state.formControl.Year.invalid}\r\n                        ></FormInput>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <label htmlFor=\"Global_Sales\">Global Sales</label>\r\n                        <FormInput\r\n                            id=\"Global_Sales\"\r\n                            type=\"text\"\r\n                            defaultValue={this.state.initialData.Global_Sales}\r\n                            onChange={(e) => {\r\n                                this.changeHandler(e);\r\n                            }}\r\n                            valid={this.state.formControl.Global_Sales.valid}\r\n                            invalid={this.state.formControl.Global_Sales.invalid}\r\n                        ></FormInput>\r\n                    </FormGroup>\r\n                </Form>\r\n                <Button\r\n                    className=\"submit-button\"\r\n                    onClick={() => {\r\n                        this.updateData();\r\n                    }}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <div className=\"loading-spinner\">{spinner}</div>\r\n                <div className=\"alert\">{alert}</div>\r\n                <Link to=\"/\">\r\n                    <Button theme=\"secondary\">Back to Search</Button>\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;\r\n"]},"metadata":{},"sourceType":"module"}