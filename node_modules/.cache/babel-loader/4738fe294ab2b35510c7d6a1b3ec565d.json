{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jerej\\\\Desktop\\\\R0314-MEAN\\\\project-3-frontend\\\\src\\\\components\\\\edit.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../App.css\";\nimport { Button, FormInput, Form, FormGroup } from \"shards-react\";\nimport Alert from \"./alert\";\n\nclass Edit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      initialData: \"\"\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount\");\n    this.getData(this.state.id).then(r => {\n      console.log(\"Initial data is being set\");\n      console.log(r);\n      this.setState({\n        initialData: r\n      });\n    });\n  }\n  /* useEffect(() => {\r\n      //ID of the entry that is being edited comes from the URL parameter.\r\n      id = props.match.params.id;\r\n      initialData = getData(id);\r\n  }); */\n  //Gets the initial field values based on the id in the URL parameter.\n\n\n  async getData(entryId) {\n    var url = \"http://localhost:5000/api/get/\" + entryId;\n    var data = await fetch(url).then(response => {\n      return response.json();\n    }).then(r => {\n      return JSON.stringify(r);\n    });\n    console.log(\"getData returns\\n\" + data);\n    return data;\n  }\n\n  updateData() {\n    var name = document.getElementById(\"Name\").value;\n    var platform = document.getElementById(\"Platform\").value;\n    var year = document.getElementById(\"Year\").value;\n    var globalSales = document.getElementById(\"Global_Sales\").value;\n    var message;\n\n    if (name === \"\" || platform === \"\" || year === \"\" || globalSales === \"\") {\n      message = \"Please fill all fields to submit data.\";\n      ReactDOM.render( /*#__PURE__*/React.createElement(Alert, {\n        alertText: message,\n        status: \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }), document.getElementsByClassName(\"alert\")[0]);\n    } else {\n      message = \"Edit successful!\";\n      var updatedData = {\n        _id: this.state.initialData.id,\n        Name: name,\n        Platform: platform,\n        Year: year,\n        Global_Sales: globalSales\n      };\n      console.log(\"Updated data:\\n\" + JSON.stringify(updatedData));\n      fetch(\"http://localhost:5000/api/update\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedData)\n      }).catch(error => {\n        message = \"Fetch error\";\n        console.error(\"Error:\", error);\n        ReactDOM.render( /*#__PURE__*/React.createElement(Alert, {\n          alertText: message,\n          status: \"error\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }\n        }), document.getElementsByClassName(\"alert\")[0]);\n      }).then(response => response.json()).then(data => {\n        console.log(\"Updated data:\\n\" + JSON.stringify(data));\n        ReactDOM.render( /*#__PURE__*/React.createElement(Alert, {\n          alertText: message,\n          status: \"success\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }\n        }), document.getElementsByClassName(\"alert\")[0]);\n      });\n    }\n  }\n\n  render() {\n    console.log(\"Render is run\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(FormInput, {\n      id: \"Name\",\n      type: \"text\",\n      defaultValue: this.state.initialData.Name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Platform\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }, \"Platform\"), /*#__PURE__*/React.createElement(FormInput, {\n      id: \"Platform\",\n      type: \"text\",\n      defaultValue: this.state.initialData.Platform,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Year\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \"Year\"), /*#__PURE__*/React.createElement(FormInput, {\n      id: \"Year\",\n      type: \"text\",\n      defaultValue: this.state.initialData.Year,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Global_Sales\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }\n    }, \"Global Sales\"), /*#__PURE__*/React.createElement(FormInput, {\n      id: \"Global_Sales\",\n      type: \"text\",\n      defaultValue: this.state.initialData.Global_Sales,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Button, {\n      className: \"submit-button\",\n      onClick: () => {\n        this.updateData();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Edit;","map":{"version":3,"sources":["C:/Users/jerej/Desktop/R0314-MEAN/project-3-frontend/src/components/edit.js"],"names":["React","ReactDOM","Button","FormInput","Form","FormGroup","Alert","Edit","Component","constructor","props","state","id","match","params","initialData","componentDidMount","console","log","getData","then","r","setState","entryId","url","data","fetch","response","json","JSON","stringify","updateData","name","document","getElementById","value","platform","year","globalSales","message","render","getElementsByClassName","updatedData","_id","Name","Platform","Year","Global_Sales","method","headers","body","catch","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,YAAP;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,IAA5B,EAAkCC,SAAlC,QAAmD,cAAnD;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,EAAE,EAAE,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,EADnB;AAETG,MAAAA,WAAW,EAAE;AAFJ,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,SAAKC,OAAL,CAAa,KAAKR,KAAL,CAAWC,EAAxB,EAA4BQ,IAA5B,CAAkCC,CAAD,IAAO;AACpCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACA,WAAKC,QAAL,CAAc;AAAEP,QAAAA,WAAW,EAAEM;AAAf,OAAd;AACH,KAJD;AAKH;AAED;;;;;AAMA;;;AACA,QAAMF,OAAN,CAAcI,OAAd,EAAuB;AACnB,QAAIC,GAAG,GAAG,mCAAmCD,OAA7C;AACA,QAAIE,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAL,CACZJ,IADY,CACNO,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAHY,EAIZR,IAJY,CAINC,CAAD,IAAO;AACT,aAAOQ,IAAI,CAACC,SAAL,CAAeT,CAAf,CAAP;AACH,KANY,CAAjB;AAOAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBO,IAAlC;AACA,WAAOA,IAAP;AACH;;AAEDM,EAAAA,UAAU,GAAG;AACT,QAAIC,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,KAA3C;AACA,QAAIC,QAAQ,GAAGH,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;AACA,QAAIE,IAAI,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,KAA3C;AACA,QAAIG,WAAW,GAAGL,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAA1D;AAEA,QAAII,OAAJ;;AAEA,QAAIP,IAAI,KAAK,EAAT,IAAeI,QAAQ,KAAK,EAA5B,IAAkCC,IAAI,KAAK,EAA3C,IAAiDC,WAAW,KAAK,EAArE,EAAyE;AACrEC,MAAAA,OAAO,GAAG,wCAAV;AACAtC,MAAAA,QAAQ,CAACuC,MAAT,eACI,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAED,OAAlB;AAA2B,QAAA,MAAM,EAAC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEIN,QAAQ,CAACQ,sBAAT,CAAgC,OAAhC,EAAyC,CAAzC,CAFJ;AAIH,KAND,MAMO;AACHF,MAAAA,OAAO,GAAG,kBAAV;AAEA,UAAIG,WAAW,GAAG;AACdC,QAAAA,GAAG,EAAE,KAAKhC,KAAL,CAAWI,WAAX,CAAuBH,EADd;AAEdgC,QAAAA,IAAI,EAAEZ,IAFQ;AAGda,QAAAA,QAAQ,EAAET,QAHI;AAIdU,QAAAA,IAAI,EAAET,IAJQ;AAKdU,QAAAA,YAAY,EAAET;AALA,OAAlB;AAOArB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBW,IAAI,CAACC,SAAL,CAAeY,WAAf,CAAhC;AAEAhB,MAAAA,KAAK,CAAC,kCAAD,EAAqC;AACtCsB,QAAAA,MAAM,EAAE,KAD8B;AAEtCC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF6B;AAKtCC,QAAAA,IAAI,EAAErB,IAAI,CAACC,SAAL,CAAeY,WAAf;AALgC,OAArC,CAAL,CAOKS,KAPL,CAOYC,KAAD,IAAW;AACdb,QAAAA,OAAO,GAAG,aAAV;AACAtB,QAAAA,OAAO,CAACmC,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACAnD,QAAAA,QAAQ,CAACuC,MAAT,eACI,oBAAC,KAAD;AAAO,UAAA,SAAS,EAAED,OAAlB;AAA2B,UAAA,MAAM,EAAC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEIN,QAAQ,CAACQ,sBAAT,CAAgC,OAAhC,EAAyC,CAAzC,CAFJ;AAIH,OAdL,EAeKrB,IAfL,CAeWO,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAfxB,EAgBKR,IAhBL,CAgBWK,IAAD,IAAU;AACZR,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBW,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAhC;AACAxB,QAAAA,QAAQ,CAACuC,MAAT,eACI,oBAAC,KAAD;AAAO,UAAA,SAAS,EAAED,OAAlB;AAA2B,UAAA,MAAM,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEIN,QAAQ,CAACQ,sBAAT,CAAgC,OAAhC,EAAyC,CAAzC,CAFJ;AAIH,OAtBL;AAuBH;AACJ;;AACDD,EAAAA,MAAM,GAAG;AACLvB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,MAAd;AAAqB,MAAA,IAAI,EAAC,MAA1B;AAAiC,MAAA,YAAY,EAAE,KAAKP,KAAL,CAAWI,WAAX,CAAuB6B,IAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,eAKI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,UAAd;AAAyB,MAAA,IAAI,EAAC,MAA9B;AAAqC,MAAA,YAAY,EAAE,KAAKjC,KAAL,CAAWI,WAAX,CAAuB8B,QAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CALJ,eASI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,MAAd;AAAqB,MAAA,IAAI,EAAC,MAA1B;AAAiC,MAAA,YAAY,EAAE,KAAKlC,KAAL,CAAWI,WAAX,CAAuB+B,IAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CATJ,eAaI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,OAAO,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,oBAAC,SAAD;AACI,MAAA,EAAE,EAAC,cADP;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,YAAY,EAAE,KAAKnC,KAAL,CAAWI,WAAX,CAAuBgC,YAHzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAbJ,CADJ,eAuBI,oBAAC,MAAD;AACI,MAAA,SAAS,EAAC,eADd;AAEI,MAAA,OAAO,EAAE,MAAM;AACX,aAAKhB,UAAL;AACH,OAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBJ,eA+BI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/BJ,CADJ;AAmCH;;AA9H8B;;AAiInC,eAAexB,IAAf","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../App.css\";\r\nimport { Button, FormInput, Form, FormGroup } from \"shards-react\";\r\nimport Alert from \"./alert\";\r\n\r\nclass Edit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            initialData: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"componentDidMount\");\r\n        this.getData(this.state.id).then((r) => {\r\n            console.log(\"Initial data is being set\");\r\n            console.log(r);\r\n            this.setState({ initialData: r });\r\n        });\r\n    }\r\n\r\n    /* useEffect(() => {\r\n        //ID of the entry that is being edited comes from the URL parameter.\r\n        id = props.match.params.id;\r\n        initialData = getData(id);\r\n    }); */\r\n\r\n    //Gets the initial field values based on the id in the URL parameter.\r\n    async getData(entryId) {\r\n        var url = \"http://localhost:5000/api/get/\" + entryId;\r\n        var data = await fetch(url)\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((r) => {\r\n                return JSON.stringify(r);\r\n            });\r\n        console.log(\"getData returns\\n\" + data);\r\n        return data;\r\n    }\r\n\r\n    updateData() {\r\n        var name = document.getElementById(\"Name\").value;\r\n        var platform = document.getElementById(\"Platform\").value;\r\n        var year = document.getElementById(\"Year\").value;\r\n        var globalSales = document.getElementById(\"Global_Sales\").value;\r\n\r\n        var message;\r\n\r\n        if (name === \"\" || platform === \"\" || year === \"\" || globalSales === \"\") {\r\n            message = \"Please fill all fields to submit data.\";\r\n            ReactDOM.render(\r\n                <Alert alertText={message} status=\"error\"></Alert>,\r\n                document.getElementsByClassName(\"alert\")[0]\r\n            );\r\n        } else {\r\n            message = \"Edit successful!\";\r\n\r\n            var updatedData = {\r\n                _id: this.state.initialData.id,\r\n                Name: name,\r\n                Platform: platform,\r\n                Year: year,\r\n                Global_Sales: globalSales,\r\n            };\r\n            console.log(\"Updated data:\\n\" + JSON.stringify(updatedData));\r\n\r\n            fetch(\"http://localhost:5000/api/update\", {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(updatedData),\r\n            })\r\n                .catch((error) => {\r\n                    message = \"Fetch error\";\r\n                    console.error(\"Error:\", error);\r\n                    ReactDOM.render(\r\n                        <Alert alertText={message} status=\"error\"></Alert>,\r\n                        document.getElementsByClassName(\"alert\")[0]\r\n                    );\r\n                })\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    console.log(\"Updated data:\\n\" + JSON.stringify(data));\r\n                    ReactDOM.render(\r\n                        <Alert alertText={message} status=\"success\"></Alert>,\r\n                        document.getElementsByClassName(\"alert\")[0]\r\n                    );\r\n                });\r\n        }\r\n    }\r\n    render() {\r\n        console.log(\"Render is run\");\r\n        return (\r\n            <div className=\"edit\">\r\n                <Form>\r\n                    <FormGroup>\r\n                        <label htmlFor=\"Name\">Name</label>\r\n                        <FormInput id=\"Name\" type=\"text\" defaultValue={this.state.initialData.Name}></FormInput>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <label htmlFor=\"Platform\">Platform</label>\r\n                        <FormInput id=\"Platform\" type=\"text\" defaultValue={this.state.initialData.Platform}></FormInput>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <label htmlFor=\"Year\">Year</label>\r\n                        <FormInput id=\"Year\" type=\"text\" defaultValue={this.state.initialData.Year}></FormInput>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <label htmlFor=\"Global_Sales\">Global Sales</label>\r\n                        <FormInput\r\n                            id=\"Global_Sales\"\r\n                            type=\"text\"\r\n                            defaultValue={this.state.initialData.Global_Sales}\r\n                        ></FormInput>\r\n                    </FormGroup>\r\n                </Form>\r\n                <Button\r\n                    className=\"submit-button\"\r\n                    onClick={() => {\r\n                        this.updateData();\r\n                    }}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <div className=\"alert\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;\r\n"]},"metadata":{},"sourceType":"module"}